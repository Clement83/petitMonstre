#if !defined (AllMonsterSprite_H)
#define AllMonsterSprite_H

const byte sprMecheBizardFront[] PROGMEM = {24,24,0x0,0x8,0x0,0x0,0x34,0x0,0x0,0x34,0x0,0x0,0x6E,0x0,0x0,0x6E,0x0,0x1,0xE7,0x80,0x3,0x18,0xC0,0x6,0x8,0x60,0xC,0x8,0x30,0x8,0x0,0x18,0x18,0x0,0x8,0x31,0xE3,0xCC,0x20,0x63,0x4,0x60,0x63,0x6,0x40,0x0,0x2,0x40,0x0,0x3,0xC0,0x0,0x1,0x80,0x0,0x1,0x80,0x0,0x1,0xF8,0xFE,0x1F,0x84,0xE0,0x21,0xFC,0xE0,0x3F,0xAA,0x0,0x55,0xFF,0xFF,0xFF,};
const byte sprMecheBizardBack[] PROGMEM = {24,24,0x0,0x8,0x0,0x0,0x34,0x0,0x0,0x34,0x0,0x0,0x6E,0x0,0x0,0x6E,0x0,0x1,0xF7,0x80,0x3,0x10,0xC0,0x6,0x38,0x60,0xC,0x6C,0x30,0x8,0x46,0x18,0x18,0x83,0x8,0x31,0x11,0x8C,0x21,0x18,0xC4,0x61,0x2C,0x46,0x41,0x28,0x42,0x43,0x28,0x43,0xC6,0x24,0x51,0x8C,0x26,0x7D,0x8C,0x66,0x25,0xBC,0xD7,0x35,0xA8,0xBB,0x1F,0xE8,0xA8,0x9,0x88,0x0,0x9,0xFF,0xFF,0xFF,};

const byte sprFlottilleBack[] PROGMEM = {24,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x1,0x80,0x0,0x2,0xC0,0x1C,0x5,0x40,0x17,0x8F,0x40,0x34,0xFA,0x40,0x64,0x3A,0x40,0x46,0x3E,0x60,0xC2,0x3,0xA0,0x92,0x0,0xE0,0x92,0x0,0x30,0x93,0x3,0x58,0x89,0x3,0xFC,0x89,0x2,0x6,0x89,0x0,0x2,0x91,0x0,0x23,0x91,0x0,0x39,0x92,0x0,0x6F,0xA2,0x0,0x1,0xA6,0x3F,0xFD,0x87,0xE0,0x7,0xFE,0x0,0x1,};
const byte sprFlottilleFront[] PROGMEM = {24,24,0x0,0x0,0x80,0x0,0x3,0xC0,0x0,0x6,0xE0,0x0,0xD,0xA0,0x0,0x39,0x38,0x0,0x67,0xEC,0x0,0x7C,0x3E,0x1,0xC0,0x7,0x3,0x0,0x7,0x6,0x0,0x9,0xC,0xF8,0x19,0x8,0x18,0x11,0x10,0x8,0x25,0x30,0x0,0x65,0x20,0x0,0x4D,0x20,0x40,0x59,0x2F,0xC0,0x7D,0x40,0x40,0x45,0x40,0x0,0x45,0x43,0xFE,0x61,0x4E,0x3,0xE1,0x78,0x0,0x7B,0x60,0x0,0xF,0xC0,0x0,0x3,};

const byte sprChampiFortFront[] PROGMEM = {24,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xC0,0x7,0xC8,0xF8,0x1E,0x8,0x3E,0x3F,0xFF,0xFF,0x7F,0xE3,0xFF,0x5C,0x0,0xE,0x4C,0x73,0x8C,0x5F,0x73,0xB8,0x73,0x0,0x3D,0x33,0x0,0x47,0x1E,0x1E,0x2E,0xF,0x80,0x7C,0x1,0xE3,0xE0,0x1,0xE1,0xC0,0x7,0x80,0x70,0x8,0x0,0x18,0x8,0x0,0xC,0x10,0x7F,0x6,0x30,0xE3,0x86,0x7F,0xE3,0xFF,0xE7,0xC1,0xE7,0x88,0x0,0x11,};
const byte sprChampiFortBack[] PROGMEM = {24,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xFF,0xC0,0x7,0xC8,0xF8,0x1E,0x8,0x3E,0x3F,0xFF,0xFF,0x7F,0xE3,0xFF,0x5C,0x22,0xE,0x4C,0x22,0xC,0x5F,0xE3,0x78,0x73,0xE3,0xFD,0x33,0x63,0x47,0x1E,0x23,0x2E,0xF,0xE1,0xFC,0x1,0xE3,0xE0,0x1,0xE1,0xC0,0x7,0x80,0x70,0x8,0x0,0x18,0x8,0x0,0xC,0x10,0x7F,0x6,0x30,0xE3,0x86,0x7F,0xE3,0xFF,0xE7,0xC1,0xE7,0x88,0x0,0x11,};

const byte sprTerraBaffleBack[] PROGMEM = {24,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x45,0x54,0x55,0x45,0x54,0x55,0x45,0x54,0x7F,0xC7,0xFC,0x40,0x44,0x4,0x40,0x44,0x4,0x7D,0xC7,0xDC,0x5,0x0,0x50,0x5,0x0,0x50,0xF,0x1C,0x50,0x9,0xB6,0xD8,0x18,0xEB,0x88,0x17,0x94,0xC8,0x1C,0x26,0x78,0x32,0x6B,0x18,0x76,0x89,0xDE,0x44,0xDE,0x43,0xC5,0xD2,0x59,0xCD,0x13,0x4D,0x89,0x20,0x61,0xFF,0xFF,0xFF,};
const byte sprTerraBaffleFront[] PROGMEM = {24,24,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x55,0x45,0x54,0x55,0x45,0x54,0x55,0x45,0x54,0x7F,0xC7,0xFC,0x40,0x44,0x4,0x40,0x44,0x4,0x7D,0xC7,0xDC,0x5,0x0,0x50,0x5,0x0,0x50,0xF,0x1C,0x50,0x9,0xB6,0xD8,0x18,0xE3,0x88,0x17,0x80,0xC8,0x1C,0x0,0x78,0x31,0xFF,0x98,0x78,0xE7,0x1E,0x4C,0x42,0x33,0xC4,0x0,0x61,0xFE,0x7C,0x7F,0xAB,0x0,0x55,0xFF,0xFF,0xFF,};

/*
const byte* const allSpriteMonstersFront[4] PROGMEM = {
  sprMecheBizardFront,
  sprFlottilleFront,
  sprChampiFortFront,
  sprTerraBaffleFront,
};

const byte* const allSpriteMonstersBack[4] PROGMEM = {
  sprMecheBizardBack,
  sprFlottilleBack,
  sprChampiFortBack,
  sprTerraBaffleBack,
};*/


const byte* const GetSpriteMonsterByNumero(uint8_t num, bool isFront)
{
	switch(num)
	{
		case 0 : 
                if(isFront) return sprMecheBizardFront;
                return sprMecheBizardBack;
		break;
		case 1 : 
                if(isFront) return sprFlottilleFront;
                return sprFlottilleBack;
		break;
		case 2 : 
                if(isFront) return sprChampiFortFront;
                return sprChampiFortBack;
		break;
		case 3 : 
                if(isFront) return sprTerraBaffleFront;
                return sprTerraBaffleBack;
		break;
	}
}











const byte attaqueGriffe[] PROGMEM = {16,16,
B00000000,B00000000,
B00000000,B00000000,
B00000000,B00000000,
B00000111,B11000000,
B00011100,B00000000,
B00110000,B00010000,
B00100000,B11110000,
B01100011,B10000000,
B01001100,B00000000,
B00011000,B00111000,
B00010000,B11100000,
B00010001,B10000000,
B00000011,B00000000,
B00000010,B00000000,
B00000000,B00000000,
B00000000,B00000000,
};


#endif 

